<!-- 
	## PipelineConfig ##
	
	Type: Type of pipeline configuration (graphics / compute)
	Name: User defined name (debuging / directx naming)
	
	Source & More infos: 
	https://docs.microsoft.com/en-us/windows/win32/api/d3d12/ns-d3d12-d3d12_graphics_pipeline_state_desc
-->
<PipelineConfig Type="graphics" Name="Example pipeline">
	<!-- 
		## Shader[s] ##
		
		Type: type of shader VS/PS/HS/DS/GS/AS/MS
		Path: path to shader without extension (will in the future 
		      auto compile if shader is present in hlsl and not 
			  recent
	-->
	<Shader Type="VS" Path="shaders/example.vs" />

	<!--
		## StreamOutput ##
		
		RasterizedStream: (integer) The index number of the stream to 
		                  be sent to the rasterizer stage.
	-->
	<StreamOutput RasterizedStream="0" >
		<!-- 
			## Declaration[s] ##
			
			Stream: Zero-based, stream number.
			SemanticName: Type of output element; possible values include: 
			              "POSITION", "NORMAL", or "TEXCOORD0". 
			SemanticIndex: Output element's zero-based index.
			StartComponent: The component of the entry to begin writing out to. 
			                Valid values are 0 to 3. 
			ComponentCount: The number of components of the entry to write out to. 
			                Valid values are 1 to 4.
			OutputSlot: The associated stream output buffer that is bound to the pipeline. 
			            The valid range for OutputSlot is 0 to 3.
		-->
		<Declaration 
			Stream="0" 
			SemanticName="POSITION" 
			SemanticIndex="0" 
			StartComponent="0"
			ComponentCount="4"
			OutputSlot="0"
		/>
		
		<!--
			## Stride[s] ##
			
			Value: Each stride is the size of an element for the buffer.
		-->
		<Stride Value="0" />
	</StreamOutput>
	
	<!--
		## BlendState  ##
		
		AlphaToCoverageEnable: Specifies whether to use alpha-to-coverage 
		                       as a multisampling technique when setting a 
							   pixel to a render target.
		IndependentBlendEnable: Specifies whether to enable independent blending 
		                        in simultaneous render targets. 
		SampleMask: The sample mask for the blend state.
	-->
	<BlendState 
		AlphaToCoverageEnable="true" 
		IndependentBlendEnable="false" 
		SampleMask="FFFFFFFF"
	>
		<!-- 
			## Blend[s] ##
			
			BlendEnable: Specifies whether to enable (or disable) blending.
			SrcBlend: Blend type for src pixels RGB components
			DestBlend: Blend type for dest pixels RGB components
			BlendOp: Blend operation / function for RGB components
			SrcBlendAlpha: Blend type for src pixels A component
			DestBlendAlpha: Blend type for dest pixels A component
			BlendOpAlpha: Blend operation / function for A component
			
			LogicOpEnable: Specifies whether to enable (or disable) a logical operation.
			LogicOp: Logical blending operation
			
			RenderTargetWriteMask: Specifies which components are written to the 
			                       RenderTarget (RGBA)
		-->
		<Blend
			BlendEnable="false"
			SrcBlend="D3D12_BLEND_ONE"
			DestBlend="D3D12_BLEND_ZERO"
			BlendOp="D3D12_BLEND_OP_ADD"
			SrcBlendAlpha="D3D12_BLEND_ONE"
			DestBlendAlpha="D3D12_BLEND_ZERO"
			BlendOpAlpha="D3D12_BLEND_OP_ADD"
			
			LogicOpEnable="false"
			LogicOp="D3D12_LOGIC_OP_NOOP"
			
			RenderTargetWriteMask="RGBA"
		/>
	</BlendState>
	
	<!--
		## RasterizerState ##
		
		FillMode: A value that specifies the fill mode to use when rendering.
		CullMode: A value that specifies that triangles facing the specified direction 
		          are not drawn.
		FrontCounterClockwise: Determines if a triangle is front- or back-facing. 
		DepthBias: Depth value added to a given pixel. 
		DepthBiasClamp: Maximum depth bias of a pixel. 
		SlopeScaledDepthBias: Scalar on a given pixel's slope. 
		DepthClipEnable: Specifies whether to enable clipping based on distance.
		MultisampleEnable: Specifies whether to use the quadrilateral or alpha line 
		                   anti-aliasing algorithm on multisample antialiasing (MSAA) 
						   render targets.
		AntialiasedLineEnable: Specifies whether to enable line antialiasing; only applies 
		                       if doing line drawing and MultisampleEnable is FALSE. 
		ForcedSampleCount: The sample count that is forced while UAV rendering or rasterizing.
		ConservativeRaster: A value that identifies whether conservative rasterization is on or off.
	-->
	<RasterizerState
		FillMode="D3D12_FILL_MODE_SOLID"
		CullMode="D3D12_CULL_MODE_BACK"
		FrontCounterClockwise="false"
		DepthBias="0"
		DepthBiasClamp="0.0"
		SlopeScaledDepthBias="0.0"
		DepthClipEnable="true"
		MultisampleEnable="false"
		AntialiasedLineEnable="false"
		ForcedSampleCount="0"
		ConservativeRaster="D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF"
	/>
	
	<!--
		## DepthStencilState ##
		
		DepthEnable: Specifies whether to enable depth testing.
		DepthWriteMask: A value that identifies a portion of the depth-stencil buffer that can be 
		                modified by depth data.
		DepthFunc: A value that identifies a function that compares depth data against existing 
		           depth data.
				   
		StencilEnable: Specifies whether to enable stencil testing.
		StencilReadMask: Identify a portion of the depth-stencil buffer for reading stencil data.
		StencilWriteMask: Identify a portion of the depth-stencil buffer for writing stencil data.
	-->
	<DepthStencilState
		DepthEnable="true"
		DepthWriteMask="D3D12_DEPTH_WRITE_MASK_ALL"
		DepthFunc="D3D12_COMPARISON_LESS"
		
		StencilEnable="false"
		StencilReadMask="D3D12_DEFAULT_STENCIL_READ_MASK"
		StencilWriteMask="D3D12_DEFAULT_STENCIL_WRITE_MASK"
	>
		<!--
			## FrontFace & BackFace ##
			
			StencilFailOp: A value that identifies the stencil operation to perform when stencil 
			               testing fails.
			StencilDepthFailOp: A value that identifies the stencil operation to perform when 
			                    stencil testing passes and depth testing fails.
			StencilPassOp: A that identifies the stencil operation to perform when stencil 
			               testing and depth testing both pass.
			StencilFunc: A value that identifies the function that compares stencil data against 
			             existing stencil data.
		-->
		<FrontFace 
			StencilFailOp="D3D12_STENCIL_OP_KEEP"
			StencilDepthFailOp="D3D12_STENCIL_OP_KEEP"
			StencilPassOp="D3D12_STENCIL_OP_KEEP"
			StencilFunc="D3D12_COMPARISON_ALWAYS"
		/>
		<BackFace
			StencilFailOp="D3D12_STENCIL_OP_KEEP"
			StencilDepthFailOp="D3D12_STENCIL_OP_KEEP"
			StencilPassOp="D3D12_STENCIL_OP_KEEP"
			StencilFunc="D3D12_COMPARISON_ALWAYS"
		/>
	</DepthStencilState>
	
	<!--
		## InputLayout ##
	-->
	<InputLayout>
		<!--
			## InputElement[s] ##
			
			SemanticName: The HLSL semantic associated with this element in a shader input-signature.
			SemanticIndex: The semantic index for the element. A semantic index modifies a semantic, 
			               with an integer index number. 
			Format: A DXGI_FORMAT-typed value that specifies the format of the element data.
			InputSlot: An integer value that identifies the input-assembler. 
			AlignedByteOffset: Offset, in bytes, to this element from the start of the vertex.
			InputSlotClass: A value that identifies the input data class for a single input slot.
			InstanceDataStepRate: The number of instances to draw using the same per-instance data 
			                      before advancing in the buffer by one element.
		-->
		<InputElement
			SemanticName="POSITION"
			SemanticIndex="0"
			Format="DXGI_FORMAT_UNKNOWN"
			InputSlot="0"
			AlignedByteOffset="D3D12_APPEND_ALIGNED_ELEMENT"
			InputSlotClass="D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA"
			InstanceDataStepRate="0"
		/>
	</InputLayout>
	
	<!--
		## IBStripCutValue ##
		
		Value: When using triangle strip primitive topology, vertex positions are interpreted 
		       as vertices of a continuous triangle “strip”. There is a special index value 
			   that represents the desire to have a discontinuity in the strip, the cut index value.
	-->
	<IBStripCutValue Value="D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED" />
	
	<!--
		## PrimitiveTopologyType ##
		
		Value: Specifies how the pipeline interprets geometry or hull shader input primitives.
	-->
	<PrimitiveTopologyType Value="D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE" />
	
	<!--
		## RenderTargets ##
		
		DSVFormat: A DXGI_FORMAT-typed value for the depth-stencil format.
	-->
	<RenderTargets DSVFormat="DXGI_FORMAT_UNKNOWN">
		<!--
			## RenderTarget ##
			
			RTVFormat: AA DXGI_FORMAT-typed value for the render target format.
		-->
		<RenderTarget RTVFormat="DXGI_FORMAT_UNKNOWN" />
	</RenderTargets>
	
	<!--
		## SampleDesc ##
		
		Count: The number of multisamples per pixel.
		Quality: The image quality level. The higher the quality, the lower the performance. 
	-->
	<SampleDesc Count="1" Quality="0" />
</PipelineConfig>
